import tkinter as tk
from tkinter import ttk, messagebox
import joblib
import pandas as pd

# Load model and dependencies
model = joblib.load('D:\\chuan-doan-beo-phi\\model.pkl')
scaler = joblib.load('D:\\chuan-doan-beo-phi\\scaler.pkl')
label_encoders = joblib.load('D:\\chuan-doan-beo-phi\\label_encoders.pkl')

X_columns = [
    'Gender', 'Age', 'Height', 'Weight', 'family_history_with_overweight',
    'FAVC', 'FCVC', 'NCP', 'CAEC', 'SMOKE', 'CH2O', 'SCC', 'FAF', 'TUE',
    'CALC', 'MTRANS'
]

categorical_columns = ['Gender', 'family_history_with_overweight', 'FAVC', 
                       'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS']

translation_mapping = {
    'Gender': {'Nam': 'Male', 'N·ªØ': 'Female'},
    'family_history_with_overweight': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'FAVC': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'CAEC': {'Kh√¥ng': 'no', 'Th·ªânh tho·∫£ng': 'Sometimes', 'Th∆∞·ªùng xuy√™n': 'Frequently', 'Lu√¥n lu√¥n': 'Always'},
    'SMOKE': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'SCC': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'CALC': {'Kh√¥ng': 'no', 'Th·ªânh tho·∫£ng': 'Sometimes', 'Th∆∞·ªùng xuy√™n': 'Frequently', 'Lu√¥n lu√¥n': 'Always'},
    'MTRANS': {'√î t√¥': 'Automobile', 'Xe m√°y': 'Motorbike', 'Xe ƒë·∫°p': 'Bike', 
               'Ph∆∞∆°ng ti·ªán c√¥ng c·ªông': 'Public_Transportation', 'ƒêi b·ªô': 'Walking'},
    'TUE': {'Hi·∫øm khi': 'Rarely', 'Th·ªânh tho·∫£ng': 'Sometimes', 'Th∆∞·ªùng xuy√™n': 'Frequently', 'Lu√¥n lu√¥n': 'Always'},
}

def predict_obesity(input_list):
    if len(input_list) != len(X_columns):
        raise ValueError(f"Expected {len(X_columns)} features, but got {len(input_list)}")

    input_dict = {col: [val] for col, val in zip(X_columns, input_list)}
    input_df = pd.DataFrame(input_dict)

    for col in categorical_columns:
        if col in input_df.columns:
            input_df[col] = label_encoders[col].transform(input_df[col])

    input_normalized = scaler.transform(input_df)
    prediction_proba = model.predict_proba(input_normalized)
    obesity_indices = [2, 3, 4]
    obesity_probability = sum(prediction_proba[0][index] for index in obesity_indices) * 100

    return obesity_probability

def provide_advice(probability):
    if probability < 20:
        return "B·∫°n c√≥ nguy c∆° b√©o ph√¨ r·∫•t th·∫•p. H√£y duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh, t·∫≠p th·ªÉ d·ª•c th∆∞·ªùng xuy√™n v√† ƒÉn u·ªëng c√¢n ƒë·ªëi!"
    elif probability < 50:
        return "Nguy c∆° b√©o ph√¨ c·ªßa b·∫°n ·ªü m·ª©c trung b√¨nh. H√£y tƒÉng c∆∞·ªùng ho·∫°t ƒë·ªông th·ªÉ ch·∫•t, h·∫°n ch·∫ø th·ª©c ƒÉn nhi·ªÅu ƒë∆∞·ªùng v√† calo!"
    elif probability < 80:
        return "Nguy c∆° b√©o ph√¨ c·ªßa b·∫°n cao. H√£y c√¢n nh·∫Øc ch·∫ø ƒë·ªô ƒÉn l√†nh m·∫°nh, gi·∫£m l∆∞·ª£ng calo d∆∞ th·ª´a, v√† t·∫≠p th·ªÉ d·ª•c th∆∞·ªùng xuy√™n!"
    else:
        return "Nguy c∆° b√©o ph√¨ r·∫•t cao. N√™n g·∫∑p chuy√™n gia dinh d∆∞·ª°ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ, ƒë·ªìng th·ªùi thay ƒë·ªïi ngay l·ªëi s·ªëng!"

def on_predict_button_click():
    try:
        input_features = [
            translation_mapping['Gender'][gender_var.get()],
            int(age_var.get()),
            float(height_var.get()),
            float(weight_var.get()),
            translation_mapping['family_history_with_overweight'][family_history_var.get()],
            translation_mapping['FAVC'][favc_var.get()],
            int(fcvc_var.get()),
            int(ncp_var.get()),
            translation_mapping['CAEC'][caec_var.get()],
            translation_mapping['SMOKE'][smoke_var.get()],
            int(ch2o_var.get()),
            translation_mapping['SCC'][scc_var.get()],
            int(faf_var.get()),
            translation_mapping['TUE'][tue_var.get()],
            translation_mapping['CALC'][calc_var.get()],
            translation_mapping['MTRANS'][mtrans_var.get()]
        ]
        
        result = predict_obesity(input_features)
        result_label.config(text=f"üîç T·ªâ l·ªá b·ªã b√©o ph√¨: {result:.2f}%")
        progress_var.set(result / 100)

        # Provide advice
        advice = provide_advice(result)
        advice_label.config(text=f"üí° L·ªùi khuy√™n: {advice}")
    except ValueError as e:
        messagebox.showerror("L·ªói", f"L·ªói: {e}")

# Set up the main window
root = tk.Tk()
root.title("·ª®ng d·ª•ng D·ª± ƒêo√°n B√©o Ph√¨ üåü")
root.geometry("600x600")

# Personal Information Frame
personal_frame = ttk.LabelFrame(root, text="Th√¥ng tin c√° nh√¢n", padding="10")
personal_frame.grid(row=0, column=0, padx=20, pady=10, sticky="nsew")

gender_var = tk.StringVar()
gender_label = ttk.Label(personal_frame, text="Gi·ªõi t√≠nh")
gender_label.grid(row=0, column=0, sticky="w")
gender_menu = ttk.OptionMenu(personal_frame, gender_var, *translation_mapping['Gender'].keys())
gender_menu.grid(row=0, column=1)

age_var = tk.StringVar()
age_label = ttk.Label(personal_frame, text="Tu·ªïi")
age_label.grid(row=1, column=0, sticky="w")
age_entry = ttk.Entry(personal_frame, textvariable=age_var)
age_entry.grid(row=1, column=1)

height_var = tk.StringVar()
height_label = ttk.Label(personal_frame, text="Chi·ªÅu cao (m)")
height_label.grid(row=2, column=0, sticky="w")
height_entry = ttk.Entry(personal_frame, textvariable=height_var)
height_entry.grid(row=2, column=1)

weight_var = tk.StringVar()
weight_label = ttk.Label(personal_frame, text="C√¢n n·∫∑ng (kg)")
weight_label.grid(row=3, column=0, sticky="w")
weight_entry = ttk.Entry(personal_frame, textvariable=weight_var)
weight_entry.grid(row=3, column=1)

family_history_var = tk.StringVar()
family_history_label = ttk.Label(personal_frame, text="Gia ƒë√¨nh c√≥ ng∆∞·ªùi b·ªã b√©o ph√¨")
family_history_label.grid(row=4, column=0, sticky="w")
family_history_menu = ttk.OptionMenu(personal_frame, family_history_var, *translation_mapping['family_history_with_overweight'].keys())
family_history_menu.grid(row=4, column=1)

# Daily Habits Frame
habits_frame = ttk.LabelFrame(root, text="Th√≥i quen h·∫±ng ng√†y", padding="10")
habits_frame.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")

favc_var = tk.StringVar()
favc_label = ttk.Label(habits_frame, text="Th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng th·ª±c ph·∫©m c√≥ Calo cao")
favc_label.grid(row=0, column=0, sticky="w")
favc_menu = ttk.OptionMenu(habits_frame, favc_var, *translation_mapping['FAVC'].keys())
favc_menu.grid(row=0, column=1)

fcvc_var = tk.StringVar()
fcvc_label = ttk.Label(habits_frame, text="T·∫ßn su·∫•t ƒÉn tr√°i c√¢y (1-3)")
fcvc_label.grid(row=1, column=0, sticky="w")
fcvc_entry = ttk.Entry(habits_frame, textvariable=fcvc_var)
fcvc_entry.grid(row=1, column=1)

ncp_var = tk.StringVar()
ncp_label = ttk.Label(habits_frame, text="S·ªë b·ªØa ƒÉn m·ªói ng√†y (1-4)")
ncp_label.grid(row=2, column=0, sticky="w")
ncp_entry = ttk.Entry(habits_frame, textvariable=ncp_var)
ncp_entry.grid(row=2, column=1)

caec_var = tk.StringVar()
caec_label = ttk.Label(habits_frame, text="Ti√™u th·ª• th·ª±c ph·∫©m gi·ªØa c√°c b·ªØa ƒÉn")
caec_label.grid(row=3, column=0, sticky="w")
caec_menu = ttk.OptionMenu(habits_frame, caec_var, *translation_mapping['CAEC'].keys())
caec_menu.grid(row=3, column=1)

# Additional Factors Frame
factors_frame = ttk.LabelFrame(root, text="C√°c y·∫øu t·ªë kh√°c", padding="10")
factors_frame.grid(row=2, column=0, padx=20, pady=10, sticky="nsew")

smoke_var = tk.StringVar()
smoke_label = ttk.Label(factors_frame, text="H√∫t thu·ªëc")
smoke_label.grid(row=0, column=0, sticky="w")
smoke_menu = ttk.OptionMenu(factors_frame, smoke_var, *translation_mapping['SMOKE'].keys())
smoke_menu.grid(row=0, column=1)

ch2o_var = tk.StringVar()
ch2o_label = ttk.Label(factors_frame, text="S·ªë l∆∞·ª£ng n∆∞·ªõc u·ªëng h√†ng ng√†y")
ch2o_label.grid(row=1, column=0, sticky="w")
ch2o_entry = ttk.Entry(factors_frame, textvariable=ch2o_var)
ch2o_entry.grid(row=1, column=1)

scc_var = tk.StringVar()
scc_label = ttk.Label(factors_frame, text="C√≥ tham gia c√°c ch∆∞∆°ng tr√¨nh gi·∫£m b√©o?")
scc_label.grid(row=2, column=0, sticky="w")
scc_menu = ttk.OptionMenu(factors_frame, scc_var, *translation_mapping['SCC'].keys())
scc_menu.grid(row=2, column=1)

faf_var = tk.StringVar()
faf_label = ttk.Label(factors_frame, text="M·ª©c ƒë·ªô ho·∫°t ƒë·ªông th·ªÉ ch·∫•t")
faf_label.grid(row=3, column=0, sticky="w")
faf_entry = ttk.Entry(factors_frame, textvariable=faf_var)
faf_entry.grid(row=3, column=1)

tue_var = tk.StringVar()
tue_label = ttk.Label(factors_frame, text="M·ª©c ƒë·ªô cƒÉng th·∫≥ng")
tue_label.grid(row=4, column=0, sticky="w")
tue_menu = ttk.OptionMenu(factors_frame, tue_var, *translation_mapping['TUE'].keys())
tue_menu.grid(row=4, column=1)

calc_var = tk.StringVar()
calc_label = ttk.Label(factors_frame, text="Ti√™u th·ª• th·ª©c ƒÉn v·∫∑t")
calc_label.grid(row=5, column=0, sticky="w")
calc_menu = ttk.OptionMenu(factors_frame, calc_var, *translation_mapping['CALC'].keys())
calc_menu.grid(row=5, column=1)

mtrans_var = tk.StringVar()
mtrans_label = ttk.Label(factors_frame, text="Ph∆∞∆°ng ti·ªán di chuy·ªÉn")
mtrans_label.grid(row=6, column=0, sticky="w")
mtrans_menu = ttk.OptionMenu(factors_frame, mtrans_var, *translation_mapping['MTRANS'].keys())
mtrans_menu.grid(row=6, column=1)

# Result and Progress
result_label = ttk.Label(root, text="üîç T·ªâ l·ªá b√©o ph√¨: Ch∆∞a c√≥ k·∫øt qu·∫£")
result_label.grid(row=3, column=0, pady=10)

progress_var = tk.DoubleVar()
progress_bar = ttk.Progressbar(root, variable=progress_var, maximum=100)
progress_bar.grid(row=4, column=0, padx=20, pady=10, sticky="ew")

advice_label = ttk.Label(root, text="üí° L·ªùi khuy√™n: Ch∆∞a c√≥ k·∫øt qu·∫£")
advice_label.grid(row=5, column=0, pady=10)

# Predict Button
predict_button = ttk.Button(root, text="D·ª± ƒëo√°n", command=on_predict_button_click)
predict_button.grid(row=6, column=0, pady=20)

root.mainloop()
